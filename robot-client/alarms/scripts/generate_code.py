import csv
import re
import string

alarm_csv = '../alarm_info.csv'
alarm_go = '../alarm_info.go'

def UpperCamelCase(input: str) -> str:
    return "".join(string.capwords(input).split())

def CsvFileToDict(file_name: str):
    alarm_info = dict()

    with open(file_name, newline='') as csvfile:
        alarm_reader = list(csv.reader(csvfile, delimiter=',', quotechar='|'))
        for row in alarm_reader[1:]:
            alarm_name = UpperCamelCase(row[0])
            alarm_info[alarm_name] = {}
            for index, entry in enumerate(row):
                property_name = UpperCamelCase(alarm_reader[0][index])
                alarm_info[alarm_name][property_name] = UpperCamelCase(entry)

    return alarm_info

def MkEnum(enum_name: str, enum_options: list[str]) -> str:
    ret = ''
    ret += f'''
type {enum_name} int64

const (
	{enum_name}_None {enum_name} = iota
'''

    for option in enum_options:
        ret += f'	{option}\n'

    ret += ')\n'

    ret += f'''
func (a {enum_name}) String() string {{
	switch a {{
	case {enum_name}_None:
		return "None"
'''

    for option in enum_options:
        ret += f'	case {option}:\n'
        ret += f'		return "{option}"\n'

    ret +='''	}
	return "unknown"
}
'''

    return ret

alarm_info = CsvFileToDict(alarm_csv)

code = '''//
// This file was generated by ./scripts/generate_code.py
// Do not modify directly. Modify alarm_info.csv and re-generate.
//

package alarms

'''

code += MkEnum('AlarmName',alarm_info.keys())

# Force a specific order for the Priority type so that priories can be compared.
code += MkEnum('Priority',['Low', 'Medium', 'High']) 

simple_attributes = ['LedIndicator', 'Sound']

for attribute in simple_attributes:
    options = set()
    for alarm_name, alarm_data in alarm_info.items():
        options.add(alarm_data[attribute])
    code += MkEnum(attribute,options)

simple_attributes.append('Priority')

for attribute in simple_attributes:
    code += f'''
func Get{attribute}(a AlarmName) {attribute} {{
	switch a {{
'''
    for alarm_name, alarm_data in alarm_info.items(): 
        code += f'	case {alarm_name}:\n'
        code += f'		return {alarm_data[attribute]}\n'
    code +=f'''	}}
	return {attribute}_None
}}
'''

f = open(alarm_go, "w")
f.write(code)
f.close()
